<% include ./partials/header.ejs %>

<style>
    .table-container {
        max-height: 70vh;
        overflow-y: auto;
        border: 1px solid #ddd;
    }
    table {
        border-collapse: collapse;
        width: 100%;
    }

    th, td {
        border: 1px solid #ddd;
        padding: 8px;
        text-align: left;
        position: relative;
    }

    td {
        border-right: 1px solid #ddd;
    }

    td:last-child {
        border-right: none;
    }

    .tooltip {
        display: none;
        position: absolute;
        top: -25px;
        left: 50%;
        transform: translateX(-50%);
        background-color: #333;
        color: #fff;
        padding: 5px;
        border-radius: 5px;
        z-index: 10;
        white-space: nowrap;
    }

    td.present:hover .tooltip {
        display: block;
    }

    .editable {
        background-color: #f0f0f0; 
    }

    .editable select {
        width: 100%;
        border: none;
        background-color: transparent;
    }
</style>

<h2 class="text-2xl flex justify-center font-bold py-2">Faculty Dashboard</h2>

<div class="table-container">
    <table id="attendanceTable" class="table-auto">
        <thead>
            <tr>
                <th>Sr.</th>
                <th>Profile</th>
                <th>Name</th>
                <th>Enrollment No</th>
                <% const openDaysSet = new Set();
                students.forEach(student => {
                    student.attendanceRecords.forEach(record => {
                        if (record.attended) {
                            openDaysSet.add(record.date.toISOString().substring(0, 10));
                        }
                    });
                });
                const openDays = Array.from(openDaysSet).sort((a, b) => new Date(a) - new Date(b));
                %>
                <% openDays.forEach(day => { %>
                    <th><%= new Date(day).toLocaleDateString('en-GB') %></th>
                <% }); %>
                <th>Total Classes</th>
                <th>Classes Attended</th>
            </tr>
        </thead>
        <tbody id="attendanceTableBody">
            <% students.forEach((student, index) => { %>
                <tr>
                    <td><%= index + 1 %></td>
                    <td><img src="<%= student.images[0].imagePath %>" alt="Student Image" class="rounded-full h-10 w-10"></td>
                    <td><%= student.name %></td>
                    <td><%= student.enrollmentNo %></td>
                    <% let classesAttended = 0; %>
                    <% openDays.forEach(day => { %>
                        <% const attendanceRecord = student.attendanceRecords.find(record => record.date.toISOString().substring(0, 10) === day); %>
                        <% const attendanceStatus = attendanceRecord ? (attendanceRecord.attended ? 'P' : 'A') : 'A'; %>
                        <% if (attendanceStatus === 'P') { classesAttended++; } %>
                        <td class="editable <%= attendanceStatus === 'P' ? 'present' : 'absent' %>">
                            <select data-student-id="<%= student._id %>" data-date="<%= new Date(day).toISOString() %>">
                                <option value="P" <%= attendanceStatus === 'P' ? 'selected' : '' %>>P</option>
                                <option value="A" <%= attendanceStatus === 'A' ? 'selected' : '' %>>A</option>
                            </select>
                        </td>                                                
                    <% }); %>
                    <td><%= openDays.length %></td>
                    <td><%= classesAttended %></td>
                </tr>
            <% }); %>
        </tbody>
    </table>
</div>

<div class="button-container flex justify-center mt-8">
    <button id="saveChangesButton" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
        Save Changes
    </button>
</div>

<script>
    document.getElementById('saveChangesButton').addEventListener('click', function() {
        const rows = document.querySelectorAll('#attendanceTableBody tr');
        const updates = [];

        rows.forEach(row => {
            const selects = row.querySelectorAll('select');
            selects.forEach(select => {
                updates.push({
                    studentId: select.getAttribute('data-student-id'),
                    date: select.getAttribute('data-date'),
                    attendanceStatus: select.value.trim().toUpperCase() 
                });
            });
        });

        //console.log('Updates to be sent:', updates);

        fetch('/updateAttendance', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(updates)
        })
        .then(response => {
            if (response.ok) {
                alert('Attendance updated successfully');
            } else {
                alert('Error updating attendance');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Error updating attendance');
        });
    });
</script>

<% include ./partials/footer.ejs %>